/* global bootstrap */
document.addEventListener("DOMContentLoaded", function () {
  // Cache c√°c input/element c·∫ßn d√πng trong form ƒëƒÉng k√Ω
  const btnSubmit = document.querySelector("#form-register .button-three");
  const inputFull = document.getElementById("register-fullname");
  const inputEmail = document.getElementById("register-email");
  const inputPass = document.getElementById("register-password");
  const inputConf = document.getElementById("register-password-confirmation");
  const inputOtp = document.getElementById("register-otp");
  const timerLabel = document.getElementById("otp-timer");

  // T·ª± l·∫•y modal elements (kh√¥ng ph·ª• thu·ªôc file kh√°c)
  const registerModalEl = document.getElementById("registerModal");
  const loginModalEl = document.getElementById("loginModal");

  const otpConfig = {
    sendOtpBtn: document.getElementById("send-otp"),
    timerLabel: timerLabel,
    otpInput: inputOtp,
    emailInput: inputEmail,
    modalElement: registerModalEl,
    defaultPurpose: "register",
  };

  const otpManager = window.createOtpManager(otpConfig);

  // Xo√° to√†n b·ªô message l·ªói/th√†nh c√¥ng tr√™n c√°c tr∆∞·ªùng c∆° b·∫£n
  function clearAllMessages() {
    [inputFull, inputEmail, inputPass, inputConf].forEach((input) =>
      otpManager.showMessageForInput(input, "", "")
    );
  }

  // Enable/disable n√∫t ƒêƒÉng k√Ω theo tr·∫°ng th√°i OTP
  function updateRegisterButton() {
    if (otpManager.isOtpValid()) {
      btnSubmit.disabled = false;
      btnSubmit.style.opacity = "1";
      btnSubmit.style.cursor = "";
    } else {
      btnSubmit.disabled = true;
      btnSubmit.style.opacity = "0.5";
      btnSubmit.style.cursor = "not-allowed";
    }
  }

  // Theo d√µi thay ƒë·ªïi message c·ªßa OTP ƒë·ªÉ t·ª± c·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t ƒêƒÉng k√Ω
  (function observeOtpMessage() {
    const otpMsgEl = otpManager.getMessageElementOf(inputOtp);
    if (!otpMsgEl) return;
    const observer = new MutationObserver(updateRegisterButton);
    observer.observe(otpMsgEl, {
      childList: true,
      subtree: true,
      characterData: true,
    });
  })();

  // Khi ng∆∞·ªùi d√πng g√µ v√†o c√°c tr∆∞·ªùng ‚Üí xo√° message c≈© ƒë·ªÉ tr√°nh g√¢y nhi·ªÖu
  [inputFull, inputEmail, inputPass, inputConf, inputOtp].forEach((i) => {
    i &&
      i.addEventListener("input", () =>
        otpManager.showMessageForInput(i, "", "")
      );
  });

  // Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa n√∫t ƒêƒÉng k√Ω (th∆∞·ªùng l√† disabled)
  updateRegisterButton();

  // √Ånh x·∫° th√¥ng b√°o l·ªói t·ª´ server v·ªÅ ƒë√∫ng √¥ input li√™n quan (d·ª±a v√†o t·ª´ kho√° ti·∫øng Vi·ªát)
  function routeServerErrorToField(message) {
    const msg = (message || "").toLowerCase(); // Th√™m: khai b√°o msg
    if (msg.includes("h·ªç") || msg.includes("t√™n")) {
      otpManager.showMessageForInput(inputFull, message, "failure");
    } else if (msg.includes("email")) {
      otpManager.showMessageForInput(inputEmail, message, "failure");
    } else if (msg.includes("x√°c nh·∫≠n m·∫≠t kh·∫©u")) {
      otpManager.showMessageForInput(inputConf, message, "failure");
    } else if (msg.includes("m·∫≠t kh·∫©u")) {
      otpManager.showMessageForInput(inputPass, message, "failure");
    } else {
      // M·∫∑c ƒë·ªãnh ƒë·∫©y ra khu v·ª±c OTP (khu v·ª±c th√¥ng b√°o chung)
      otpManager.showMessageForInput(inputOtp, message, "failure");
    }
  }

  // ƒê∆∞a UI form ƒëƒÉng k√Ω v·ªÅ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh (d√πng khi m·ªü l·∫°i/ƒë√≥ng xong)
  function resetRegisterUI() {
    clearAllMessages();

    if (inputFull) inputFull.value = "";
    if (inputEmail) inputEmail.value = "";
    if (inputPass) inputPass.value = "";
    if (inputConf) inputConf.value = "";
    if (inputOtp) inputOtp.value = "";

    if (timerLabel) timerLabel.textContent = "";

    if (btnSubmit) {
      btnSubmit.disabled = true;
      btnSubmit.classList.remove("btn-success");
      btnSubmit.style.opacity = "0.5";
      btnSubmit.style.cursor = "not-allowed";
      btnSubmit.innerHTML = "ƒêƒÉng k√Ω";
    }

    const otpMsgEl = otpManager.getMessageElementOf(inputOtp);
    if (otpMsgEl) {
      otpMsgEl.style.color = "";
      otpMsgEl.textContent = "";
      if (otpMsgEl.dataset) delete otpMsgEl.dataset.state;
    }

    updateRegisterButton();
  }

  // Reset khi modal register m·ªü/ƒë√≥ng ƒë·ªÉ l·∫ßn sau m·ªü l·∫°i lu√¥n s·∫°ch
  if (registerModalEl) {
    registerModalEl.addEventListener("show.bs.modal", resetRegisterUI);
    registerModalEl.addEventListener("hidden.bs.modal", resetRegisterUI);
  }

  // Submit ƒëƒÉng k√Ω
  btnSubmit.addEventListener("click", async function (e) {
    e.preventDefault();

    clearAllMessages();

    // Ch·∫∑n submit n·∫øu OTP ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c ho·∫∑c ƒë√£ h·∫øt h·∫°n
    if (!otpManager.isOtpValid()) {
      const timerText = (timerLabel?.textContent || "").trim();
      if (timerText === "H·∫øt h·∫°n" || timerText === "0:00") {
        otpManager.showMessageForInput(
          inputOtp,
          "M√£ OTP ƒë√£ h·∫øt h·∫°n, vui l√≤ng b·∫•m G·ª≠i OTP ƒë·ªÉ nh·∫≠n m√£ m·ªõi.",
          "failure"
        );
      } else {
        otpManager.showMessageForInput(
          inputOtp,
          "Vui l√≤ng x√°c th·ª±c OTP tr∆∞·ªõc khi ƒëƒÉng k√Ω.",
          "failure"
        );
      }
      return; // Kh√¥ng disable n√∫t
    }

    // B√¢y gi·ªù form v√† OTP ƒë·ªÅu valid ‚Üí disable n√∫t v√† g·ª≠i request
    const oldText = btnSubmit.innerHTML;
    btnSubmit.disabled = true;
    btnSubmit.innerHTML = "ƒêang t·∫°o t√†i kho·∫£n...";
    btnSubmit.style.opacity = "0.7";

    const formData = new FormData();
    formData.append("action", "register");
    formData.append("fullName", inputFull.value.trim());
    formData.append("email", inputEmail.value.trim());
    formData.append("password", inputPass.value.trim());
    formData.append("confirmPassword", inputConf.value.trim());

    try {
      const res = await fetch("/auth", {
        method: "POST",
        body: formData,
      });

      let data = await res.json();

      if (data.success) {
        // Th√†nh c√¥ng: ƒë·ªïi tr·∫°ng th√°i n√∫t r·ªìi chuy·ªÉn modal (·∫©n ƒëƒÉng k√Ω ‚Üí hi·ªán ƒëƒÉng nh·∫≠p)
        btnSubmit.classList.add("btn-success");
        btnSubmit.innerHTML = "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng";

        setTimeout(() => {
          if (registerModalEl) {
            const reg =
              bootstrap.Modal.getInstance?.(registerModalEl) ||
              new bootstrap.Modal(registerModalEl);

            // Sau khi ·∫©n xong register ‚Üí m·ªõi show login (tr√°nh ch·ªìng modal)
            const showLoginOnce = () => {
              registerModalEl.removeEventListener(
                "hidden.bs.modal",
                showLoginOnce
              );
              if (loginModalEl) {
                const login =
                  bootstrap.Modal.getInstance?.(loginModalEl) ||
                  new bootstrap.Modal(loginModalEl);
                login.show();
              }
            };
            registerModalEl.addEventListener("hidden.bs.modal", showLoginOnce, {
              once: true,
            });
            reg.hide();
          }
        }, 1200);
      } else {
        // Th·∫•t b·∫°i: ƒë·ªãnh tuy·∫øn th√¥ng b√°o l·ªói v·ªÅ ƒë√∫ng field
        routeServerErrorToField(data.message);
        btnSubmit.innerHTML = oldText;
        updateRegisterButton(); // Enable l·∫°i n√∫t n·∫øu fail
      }
    } catch (err) {
      // L·ªói m·∫°ng / kh√¥ng g·ªçi ƒë∆∞·ª£c server
      routeServerErrorToField("Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.");
      btnSubmit.innerHTML = oldText;
      updateRegisterButton(); // Enable l·∫°i n√∫t n·∫øu error
    }
  });
});
